name: Java CI with Maven

on:

  workflow_dispatch:

jobs:

  test:
 #   permissions:
  #    pages: write      # to deploy to Pages
   #   id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
   # environment:
    #  name: github-pages
     # url: ${{ steps.deployment.outputs.page_url }}


    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'

    - name: Build with Maven

      run: mvn clean test || true
    - name: Publish Allure Results JSON Artifact    
      uses: actions/upload-artifact@v3.1.2
      with:
        name: allure-results
        path: ${{ github.workspace }}/allure-results/*
        if: always()
      
    - name: Generate Allure report
      run: mvn allure:report
      if: always()
        
    - name: Publish Allure HTML report
      uses: actions/upload-artifact@v3.1.2
      with:
        name: allure-report
        path: target/allure-report
        if: always()
        

    - name: Print Java installations
      run: |
          ls -l /usr/lib/jvm/temurin-11-jdk-amd64
    - name: Set JAVA_HOME
      run: echo ${{ env.JAVA_HOME }}


    - name: Publish allure report
      uses: andrcuns/allure-publish-action@v2.3.0
      
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION : ap-south-1
        JAVA_HOME: /usr/lib/jvm/java-11/temurin-11-jdk-amd64/Contents/Home
      with:
        storageType: s3
        resultsGlob: "allure-results"
        bucket: sai-allure-reports
        prefix: ${{ github.run_number }}
        copyLatest: true
        ignoreMissingResults: true
        

 #   - name: Create directory for reports
 #     run: mkdir -p target/allure-reports/${{ github.run_number }}

#    - name: Copy reports to deployment directory
#      run: cp -R target/allure-report/* target/allure-reports/${{ github.run_number }}



    #- name: Configure GitHub Pages
     # env:
      #  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#      run: |
 #         git config --local user.name "${GITHUB_ACTOR}"
  #        git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
   #       git clone https://github.com/saisharanpatha/Selenium-POM-TestNG-Maven.git -b gh-pages
#    - name: Setup assets
 #     run: |
  #      mkdir public ${{ github.run_number }}
   #     mv ./target/allure-report/* ./${{ github.run_number }}/
    #    mv ./${{ github.run_number }} ./public/
     #   echo ${{ github.run_id }}
        
#    - name: Publish HTML report
 #     uses: actions/upload-artifact@v2
  #    with:
   #     name: allure-html-report
    #    path: ./public
  #  - name: Deploy reports to GitHub Pages
   #   env:
    #    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
     # run: |
      #    git add ./${{ github.run_number }}
       #   git commit -m "Deploy Allure reports for run ${{ github.run_number }}"
        #  git push origin gh-pages


          
#    - name: Get repository information
 #     id: repo_info
  #    run: |
   #       echo "::set-output name=repo::$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)"
    #      echo "::set-output name=owner::$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)"

#    - name: Set environment variables
 #     run: |
  #        echo "REPO_NAME=${{ steps.repo_info.outputs.repo }}" >> $GITHUB_ENV
   #       echo "REPO_OWNER=${{ steps.repo_info.outputs.owner }}" >> $GITHUB_ENV

   # - name: Display Allure report URL
    #  run: |
     #     echo "Allure report URL: https://${{ env.REPO_OWNER }}.github.io/${{ env.REPO_NAME }}/${{ github.run_number }}/index.html"

          
          
         
